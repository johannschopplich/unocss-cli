import { relative, resolve } from 'pathe'
import { readFile, writeFile } from 'fs/promises'
import fg from 'fast-glob'
import { createGenerator } from 'unocss'
import { defaultConfig } from './config'
import { loadConfig } from '@unocss/config'
import consola from 'consola'
import { cyan, dim, green, white } from 'colorette'
import { name, version } from '../package.json'
import { handleError, PrettyError } from './errors'
import { debouncePromise } from './utils'
import type { UnoGenerator, UserConfig } from 'unocss'
import type { Options, NormalizedOptions } from './types'

let uno: UnoGenerator
let userConfig: UserConfig
const fileCache = new Map<string, string>()

function resolveUserConfig() {
  let result = userConfig

  if (!result) {
    userConfig = loadConfig()?.config ?? {}
  }

  return result
}

export async function generateUnoCss(options: NormalizedOptions) {
  const outFile = options.outFile ?? resolve(process.cwd(), 'uno.css')
  const { css, matched } = await uno.generate([...fileCache].join('\n'))

  await writeFile(
    outFile,
    `/* generated by ${name} v${version} */\n${css}`,
    'utf-8'
  )

  if (!options.watch) {
    consola.success(
      `${[...matched].length} utilities generated to ${cyan(
        relative(process.cwd(), outFile)
      )}\n`
    )
  }
}

const normalizeOptions = async (options: Options) => {
  if (!options.patterns?.length) {
    throw new PrettyError(
      'No glob patterns, try ' + cyan(`${name} <path/to/**/*>`)
    )
  }

  return options as NormalizedOptions
}

export async function build(_options: Options) {
  const options = await normalizeOptions(_options)

  uno = createGenerator(resolveUserConfig(), defaultConfig)

  const files = await fg(options.patterns)
  await Promise.all(
    files.map(async (file) => {
      fileCache.set(file, await readFile(file, 'utf8'))
    })
  )

  consola.log(green(`${name} v${version}`))
  consola.start(
    options.watch ? 'UnoCSS in watch mode...' : 'UnoCSS for production...'
  )

  const debouncedBuild = debouncePromise(
    async () => {
      generateUnoCss(options)
    },
    100,
    handleError
  )

  const startWatcher = async () => {
    if (!options.watch) return

    const { watch } = await import('chokidar')
    const { patterns } = options
    const ignored = ['**/{.git,node_modules}/**']

    consola.info(
      'Watching for changes in ' +
        cyan(Array.isArray(patterns) ? patterns.join(white(', ')) : patterns)
    )

    const watcher = watch(patterns, {
      ignoreInitial: true,
      ignorePermissionErrors: true,
      ignored
    })

    watcher.on('all', async (type, file) => {
      consola.log(green(`${type}`) + ' ' + white(dim(file)))

      if (type.startsWith('unlink')) {
        fileCache.delete(file)
      } else {
        fileCache.set(file, await readFile(file, 'utf8'))
      }

      debouncedBuild()
    })
  }

  await generateUnoCss(options)

  startWatcher()
}
